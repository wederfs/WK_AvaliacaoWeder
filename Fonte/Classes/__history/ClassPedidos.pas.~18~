unit ClassPedidos;

interface

uses FireDac.Comp.Client, FireDac.Stan.param, System.SysUtils,
     ClassControle, ClassConexao;

type
  TClassPedidos = class
  private
    FNumeroPedido   :Integer;
    FData_Emissao   :TDate;
    FCodigo_Cliente :Integer;
    FValor_Total    :Real;
    FTipoAcao       :TTipoAcao;
    procedure SetData_Emissao(const Value: TDate);
    procedure SetCodigo_Cliente(const Value: Integer);
    procedure SetValor_Total(const Value: real);
    procedure SetNumeroPedido(const Value: Integer);
    procedure Setacao(const Value: TTipoAcao);
    procedure SetTipoAcao(const Value: TTipoAcao);
  public
    function Salvar : boolean;
    property Data_Emissao   :TDate read FData_Emissao write SetData_Emissao;
    property Codigo_Cliente :Integer read FCodigo_Cliente write SetCodigo_Cliente;
    property Valor_Total    :Real read FValor_Total write SetValor_Total;
    property NumeroPedido   :Integer read FNumeroPedido write SetNumeroPedido;
    property TipoAcao       :TTipoAcao read FTipoAcao write SetTipoAcao;
    procedure Carregar(ANumeroPedido : integer);
  end;

  TCadastroPedidos = class
    procedure CarregarPedido(APedidos : TClassPedidos; ANumeroPedido : Integer);
    function Incluir(APedidos : TClassPedidos) : boolean;
    function Excluir(APedidos : TClassPedidos) : boolean;
    function Alterar(APedidos : TClassPedidos) : boolean;
  private
    FConexao : TConexao;
  public
    Constructor Create;
  end;

implementation

{TClassPedidos}

procedure TClassPedidos.Carregar(ANumeroPedido : integer);
var
  VPedidos : TCadastroPedidos;
begin
  VPedidos := TCadastroPedidos.Create;
  try
    VPedidos.CarregarPedido(Self,ANumeroPedido);
  finally
    FreeAndNil(VPedidos);
  end;
end;

procedure TClassPedidos.SetData_Emissao(const Value: TDate);
begin
  FData_Emissao := value;
end;

procedure TClassPedidos.SetNumeroPedido(const Value: Integer);
begin
  FNumeroPedido := Value;
end;

procedure TClassPedidos.SetTipoAcao(const Value: TTipoAcao);
begin
  FTipoAcao := Value;
end;

function TClassPedidos.Salvar: boolean;
var
  VPedidos : TCadastroPedidos;
begin
  result := false;
  VPedidos := TCadastroPedidos.create;
  try
    case FTipoAcao of
      TTipoAcao.tpIncluir : Result := VPedidos.Incluir(self);
      TTipoAcao.tpAlterar : Result := VPedidos.Alterar(self);
      TTipoAcao.tpExcluir : Result := VPedidos.Excluir(self);
    end;
  finally
    FreeAndNil(VPedidos);
  end;
end;

procedure TClassPedidos.Setacao(const Value: TTipoAcao);
begin
  FTipoAcao := value;
end;

procedure TClassPedidos.SetCodigo_Cliente(const Value: Integer);
begin
  FCodigo_Cliente := value;
end;

procedure TClassPedidos.SetValor_Total(const Value: real);
begin
  FValor_Total := value;
end;

{ TCadastroPedidos }

function TCadastroPedidos.Alterar(APedidos: TClassPedidos): boolean;
var
  FDQuery : TFDQuery;
begin
  FDQuery := TClassControle.GetInstancia.Conexao.TQuery;
   try
     FDQuery.ExecSQL('UPDATE TB_PEDIDOS '+
                      '   SET DATA_EMISSAO=:DATA_EMISSAO, ' +
                      '       CODIGO_CLIENTE=:CODIGO_CLIENTE, '+
                      '       VALOR_TOTAL=:VALOR_TOTAL ' +
                      ' WHERE NUMEROPEDIDO=:NUMEROPEDIDO',
                      [APedidos.Data_Emissao,APedidos.Codigo_Cliente,APedidos.Valor_Total,
                       APedidos.NumeroPedido]);
     result := True;
   finally
     FreeAndNil(FDQuery);
   end;
end;

procedure TCadastroPedidos.CarregarPedido(APedidos: TClassPedidos;
  ANumeroPedido: Integer);
var
  FDQuery : TFDQuery;
begin
  FDQuery := TClassControle.GetInstancia.Conexao.TQuery;
  try
    FDQuery.Open('SELECT * FROM TB_PEDIDOS WHERE NUMEROPEDIDO=:NUMEROPEDIDO',[ANumeroPedido]);
    APedidos.Data_Emissao   := FDQuery.FieldByName('Data_Emissao').AsDateTime;
    APedidos.Codigo_Cliente := FDQuery.FieldByName('Codigo_Cliente').AsInteger;
    APedidos.Valor_Total    := FDQuery.FieldByName('Valor_Total').AsFloat;
    APedidos.Numeropedido   := FDQuery.FieldByName('NumeroPedido').AsInteger;
  finally
    FDQuery.Close;
    FreeAndNil(FDQuery);
  end;
end;

constructor TCadastroPedidos.Create;
begin
  FConexao := TClassControle.GetInstancia().Conexao;
end;

function TCadastroPedidos.Excluir(APedidos: TClassPedidos): boolean;
var
  FDQuery : TFDQuery;
begin
  FDQuery := FConexao.TQuery;
  try
    FDQuery.ExecSQL('DELETE FROM TB_PEDIDOS WHERE NUMEROPEDIDO=:NUMEROPEDIDO',[APedidos.Numeropedido]);
    Result := True;
  finally
    FreeAndNil(FDQuery);
  end;
end;

function TCadastroPedidos.Incluir(APedidos: TClassPedidos): boolean;
var
  FDQuery : TFDQuery;
begin
  FDQuery := TClassControle.GetInstancia.Conexao.TQuery;
  try
    FDQuery.Close;
    FDQuery.SQL.Clear;
    FDQuery.SQL.Text := 'INSERT INTO TB_PEDIDOS (DATA_EMISSAO, CODIGO_CLIENTE, VALOR_TOTAL) '+
                        'VALUES (:DATA_EMISSAO, :CODIGO_CLIENTE, :VALOR_TOTAL)';
    FDQuery.ParamByName('DATA_EMISSAO').AsDate := APedidos.Data_Emissao;
    FDQuery.ParamByName('CODIGO_CLIENTE').AsInteger := APedidos.Codigo_Cliente;
    FDQuery.ParamByName('VALOR_TOTAL').AsFloat := APedidos.Valor_Total;
    Result := True;
  finally
    FreeAndNil(FDQuery);
  end;
end;

end.
